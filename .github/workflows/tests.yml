name: Tests

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test - ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        exclude:
          # Exclude Python 3.13 on Windows if it's not available yet
          - os: windows-latest
            python-version: '3.13'
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Display system info
      shell: bash
      run: |
        echo "OS: ${{ matrix.os }}"
        echo "Python: ${{ matrix.python-version }}"
        python --version
        pip --version
        
    - name: Upgrade pip
      run: |
        python -m pip install --upgrade pip setuptools wheel
        
    - name: Install dependencies step by step
      shell: bash
      run: |
        # Install core dependencies first
        pip install "numpy>=1.17.0,<2.0" || pip install numpy
        pip install "pandas>=0.25.0" || pip install pandas
        pip install "scipy>=1.3.0" || pip install scipy
        pip install "six>=1.10" || pip install six
        
        # Install test dependencies
        pip install pytest
        pip install pytest-xdist
        pip install pytest-cov
        
        # Install optional dependencies
        pip install pandas-datareader || echo "pandas-datareader installation failed, continuing..."
        pip install bottleneck || echo "bottleneck installation failed, continuing..."
        
        # Show installed packages
        pip list
        
    - name: Install package
      run: |
        pip install -e .
        
    - name: Verify installation
      shell: python
      run: |
        import empyrical
        import numpy as np
        print(f'Empyrical {empyrical.__version__} installed successfully')
        
        # Test basic functionality
        returns = np.array([0.01, 0.02, -0.03, 0.04, -0.01])
        sharpe = empyrical.sharpe_ratio(returns)
        print(f'Test calculation - Sharpe ratio: {sharpe}')
        
    - name: Run tests
      shell: bash
      run: |
        python -m pytest tests/ -v --tb=short || python -m pytest tests/ -v --tb=short --no-header
      env:
        PYTHONDONTWRITEBYTECODE: 1
        PYTHONUNBUFFERED: 1
        
    - name: Upload test results on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-failure-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          *.log
          .pytest_cache/
        retention-days: 7

  test-minimal:
    name: Minimal Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy pandas scipy pytest six
        
    - name: Install package
      run: |
        pip install -e .
        
    - name: Run import test
      run: |
        python -c "import empyrical; print('Import successful')"
        
    - name: Run basic calculations
      run: |
        python -c "
import numpy as np
import empyrical
returns = np.array([0.01, 0.02, -0.03, 0.04, -0.01])
print('Sharpe ratio:', empyrical.sharpe_ratio(returns))
print('Max drawdown:', empyrical.max_drawdown(returns))
print('Annual return:', empyrical.annual_return(returns))
print('Annual volatility:', empyrical.annual_volatility(returns))
"

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: test-minimal
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy pandas scipy pytest pytest-cov six
        pip install -e .
        
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ --cov=empyrical --cov-report=xml --cov-report=term
      continue-on-error: true
        
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
      continue-on-error: true

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install flake8
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        
    - name: Run flake8
      run: |
        # Check for syntax errors
        flake8 empyrical --count --select=E9,F63,F7,F82 --show-source --statistics
        # Full lint with lenient settings
        flake8 empyrical --count --exit-zero --max-complexity=20 --max-line-length=120 --statistics
      continue-on-error: true

  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        ls -la dist/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30